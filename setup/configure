#!/usr/bin/env python3

import subprocess
from tempfile import TemporaryDirectory as tmpdir
import os
from pathlib import Path

here = os.path.abspath(os.path.dirname(__file__))


def detect_platform():
    import platform

    p = {}
    p["system"] = platform.system().lower()
    p["node"] = platform.node().lower()
    return p


def detect_existing_executable(name):
    """ Check Whether `name` is on PATH. """
    from distutils.spawn import find_executable

    return find_executable(name)


def run_script(script, my_env):

    process_output = subprocess.Popen(
        script, env=my_env, stdout=subprocess.PIPE, stderr=subprocess.PIPE
    )

    out, err = process_output.communicate()
    out, err = out.strip().decode(), err.strip().decode()
    if process_output.returncode != 0:
        raise RuntimeError(f"{script} script failed: {process_output.returncode} {out} {err}")


def prepare_env():

    installers = {
        "linux": "https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh",
        "darwin": "https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh",
    }

    my_env = os.environ.copy()
    my_env["BASE_ENV_YML"] = os.path.join(here, "env-conda-base.yml")
    my_env["ANALYSIS_ENV_YML"] = os.path.join(here, "env-analysis.yml")
    default_shell = my_env.get("SHELL", None)
    supported_shells = {"bash", "fish", "powershell", "tcsh", "xonsh", "zsh"}
    if default_shell:
        default_shell = default_shell.split("/")[-1]
        if default_shell in supported_shells:
            my_env["INIT_SHELL"] = default_shell

    conda_path = detect_existing_executable("conda")
    if conda_path is not None:
        print(
            f"************* Found an existing Conda installation in: {conda_path} **************"
        )
        print("************* Skipping Conda installation... *****************")

    else:
        print("************* Step 1/5: Installing Miniconda  *****************")
        plat = detect_platform()
        if plat["system"] in installers:
            my_env["INSTALLER"] = installers[plat["system"]]
            if plat["node"].startswith("casper") or plat["node"].startswith("cheyenne"):
                install_dir = f'/glade/work/{my_env["USER"]}/miniconda3'
            else:
                install_dir = f'{my_env["HOME"]}/miniconda3'

            my_env["INSTALL_DIR"] = install_dir

            with tmpdir():

                install_script = os.path.join(here, "install_conda")
                run_script(install_script, my_env)

        else:
            raise RuntimeError("Unsupported Platform...")
    
    if "INSTALL_DIR" not in my_env:
        my_env["INSTALL_DIR"] = Path(conda_path).parent.parent.as_posix()
    
    print("************* Step 2/5: Updating `base` conda environment *******************")
    run_script(os.path.join(here, "update_base_env"), my_env)
    print(
        "************* Step 3/5: Creating/Updating `analysis` conda environment (this can take 5-10 min) ***********"
    )
    run_script(os.path.join(here, "update_analysis_env"), my_env)
    
    print("************* Step 4/5: Running post build script for `base` environment **************")
    run_script(os.path.join(here, "post_build_base"), my_env)

    print("************* Step 5/5: Running post build script for `analysis` environment ***************")
    my_env["CARTOPY_ASSET_SCRIPT"] = os.path.join(here, "download_cartopy_assets.py")
    run_script(os.path.join(here, "post_build_analysis"), my_env)

    print("************* Setup completed successfully. ****************")
    print("==> For changes to take effect, close and re-open your current shell. <==")


def main():
    prepare_env()


if __name__ == "__main__":
    main()
